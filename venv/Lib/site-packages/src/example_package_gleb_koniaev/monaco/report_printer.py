"""
Module for outputting reports to the console

This module provides:
    ReportPrinter class for formatting and outputting data
    The print_report() method to display the results

Main functions:
    format_time(): Formats the time in MM:SS.mmm
    print_report(): Prints a report to the console

Usage example:
    printer = ReportPrinter(report, errors)
    printer.print_report()

"""


class ReportPrinter:
    """
    Class for outputting reports to the console

    Attributes:
        data_handler(ReportBuilder): Report generator
        report (list): Data to report
        errors (list): List of errors
    """

    def __init__(self, report, errors):
        """
        Initializes the report printer

        Args:
            data_handler(ReportGeneration): Generated report
        """

        self.report = report
        self.errors = errors

    @staticmethod
    def format_time(seconds):
        """
        Formats time from seconds to minutes:seconds.milliseconds

        Args:
            seconds (float): Time in seconds

        Returns:
            str: Formatted time string
        """
        minutes = int(seconds // 60)
        remaining_seconds = seconds % 60
        seconds_part = int(remaining_seconds)
        milliseconds = int((remaining_seconds - seconds_part) * 1000)
        return f"{minutes:01}:{seconds_part:02}.{milliseconds:03}"

    def print_report(self, driver_name=None):
        """
        Output the report to the console

        Args:
            driver_name (str, optional): The name of the driver to filter
        """
        if driver_name:
            found = False
            for time, name, team in self.report:
                if name == driver_name:
                    formated_time = ReportPrinter.format_time(time)
                    print(f" {name} | {team} | {formated_time}")
                    found = True
                    break
            if not found:
                print(f"Driver {driver_name} not found")
            return

        for i, (time, name, team) in enumerate(self.report[:15], 1):
            print(f"{i}. {name:20} | {team:20} | {self.format_time(time)}")
        print("---")
        for i, (time, name, team) in enumerate(self.report[15:], 16):
            print(f"{i}. {name:20} | {team:20} | {self.format_time(time)}")
        if self.errors:
            print("\n--- ERRORS IN DATA ---")
            for err_name, err_team, err_msg in self.errors:
                print(f"! {err_name:20} | {err_team:25} | {err_msg}")
