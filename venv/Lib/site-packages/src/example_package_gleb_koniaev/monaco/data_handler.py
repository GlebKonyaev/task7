"""
Module for loading and processing race data.

This module provides:
    RaceDataHandler class for working with data files
    Methods for loading data from files and calculating lap times

Main functions:
    load_abbreviations(): Loads rider abbreviations data
    load_log_files(): Loads start and finish time data
    calculate_lap_time(): Calculates the lap time for each driver

Usage example:
    handler = RaceDataHandler("./data")
    lap_times, errors = handler.calculate_lap_time()
"""

from pathlib import Path
import datetime


class RaceDataHandler:
    """
    collection and processing of data from files end.log, start.log, abbreviations.txt

    Attributes:
         data_folder (Path) : path to the folder with data files
         _abbreviations(dict) - dictionary of racer abbreviations
         _start_time(dict) - start time for each racer
         _end_time(dict) - finishing time for each racer
    """

    def __init__(self, data_folder):
        """
        Initializes the race data handler
        Args:
            data_folder (str) : Path to the folder with data files

        """
        self.data_folder = Path(data_folder)
        if not self.data_folder.exists():
            raise FileNotFoundError(f"Folder {data_folder} does not exist")

        self._abbreviations = self.load_abbreviations()
        self._start_time = self.load_log_files("start.log")
        self._end_time = self.load_log_files("end.log")

    def load_abbreviations(self):
        """
        Loads racer abbreviations data from the abbreviations.txt file
        returns:
            dict : abbreviations - dictionary of the form {code: (name, command)}
        Raises:
            FileNotFoundError: If the file abbreviations.txt is not found
        """
        abbreviations = {}
        try:
            with open(self.data_folder / "abbreviations.txt", "r") as file:
                for line in file:
                    parts = line.strip().split("_")
                    abbreviations[parts[0].strip()] = parts[1].strip(), parts[2].strip()
        except FileNotFoundError:
            print(f"File abbreviations.txt not find in  {self.data_folder}")
            raise
        return abbreviations

    def load_log_files(self, file_name):
        """
        Loads time data from log files
        returns:
            dict : info - dictionary of the form {code: datetime}
        Raises:
            FileNotFoundError: if one of the files or both are not found
        """
        info = {}
        try:
            with open(self.data_folder / file_name, "r") as file:
                for line in file:
                    parts = line.strip().split("-", 1)
                    racer = parts[0].replace("2018", "").strip()
                    time_str = parts[1]
                    try:
                        obj = datetime.datetime.strptime(time_str, "%m-%d_%H:%M:%S.%f")
                        info[racer] = obj
                    except ValueError:
                        print(f"Time format error in line: {line}")
        except FileNotFoundError:
            print(f"File {file_name} not find in  {self.data_folder}")
            raise
        return info

    def calculate_lap_time(self):
        """
        calculates each rider's lap time and finds if the time is incorrect (start time is greater than finish time)
        Returns:
            dict: lap_times - dictionary of the form {code: time in seconds}
            dict: invalid_time - dictionary of the form {code: error message}Ñ‹

        """
        lap_times = {}
        invalid_time = {}
        for racer in self._start_time:
            if racer in self._end_time:
                if self._end_time[racer] > self._start_time[racer]:
                    lap_time = self._end_time[racer] - self._start_time[racer]
                    lap_times[racer] = lap_time.total_seconds()
                else:
                    invalid_time[racer] = "Incorrect time: finish before start"
        return lap_times, invalid_time
