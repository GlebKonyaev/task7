"""
Module for generating reports based on race data

This module provides:
    ReportBuilder class for building reports
    The build_report() method for generating and sorting data

Main functions:
    build_report(): Creates a report and a list of errors

Usage example:
    builder = ReportBuilder(data_handler)
    report, errors = builder.build_report(reverse=True)
"""


class ReportBuilder:
    """
    Report generator based on race data

    Attributes:
        data_handler_files (RaceDataHandler): Data handler
        lap_times (dict): Racers' lap times
        invalid_time (dict): Errors in data
        abbreviations (dict): Racer abbreviations
    """

    def __init__(self, data_handler_files):
        """
        Initializes the report generator

        Args:
            data_handler_files(RaceDataHandler): Race data handler
        """
        self.data_handler_files = data_handler_files
        self.lap_times, self.invalid_time = data_handler_files.calculate_lap_time()
        self.abbreviations = data_handler_files.load_abbreviations()

    def build_report(self, reverse=False):
        """
        Builds a report and a list of errors

        Returns:
            list : report (list): Sorted list of tuples (time, name, command)
            list : warning (list): List of errors (name, command, message)
        """
        report = []
        for racer, time in self.lap_times.items():
            driver_name, team = self.abbreviations.get(racer, ("Unknown", "Unknown"))
            report.append((time, driver_name, team))
        warning = []
        for racer, error in self.invalid_time.items():
            driver_name, team = self.abbreviations.get(racer, ("Unknown", "Unknown"))
            warning.append((driver_name, team, error))
        report.sort(key=lambda x: x[0], reverse=reverse)
        return report, warning
